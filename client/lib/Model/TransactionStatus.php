<?php
/**
 * TransactionStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GPN.RegistrerenApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace P4NL_DATABASE_INTERFACE\Model;

use \ArrayAccess;
use \P4NL_DATABASE_INTERFACE\ObjectSerializer;

/**
 * TransactionStatus Class Doc Comment
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
        'invoice' => 'string',
        'service_code' => 'string',
        'status' => '\P4NL_DATABASE_INTERFACE\Model\Status',
        'is_test' => 'bool',
        'order' => 'string',
        'currency' => 'string',
        'amount_debit' => 'double',
        'amount_credit' => 'double',
        'transaction_type' => 'string',
        'services' => '\P4NL_DATABASE_INTERFACE\Model\Service[]',
        'custom_parameters' => '\P4NL_DATABASE_INTERFACE\Model\CustomParameter[]',
        'additional_parameters' => '\P4NL_DATABASE_INTERFACE\Model\TransactionStatusResponseAdditionalParameter',
        'mutation_type' => 'int',
        'related_transactions' => '\P4NL_DATABASE_INTERFACE\Model\RelatedTransaction[]',
        'is_cancelable' => 'bool',
        'issuing_country' => 'string',
        'start_recurrent' => 'bool',
        'recurring' => 'bool',
        'customer_name' => 'string',
        'payer_hash' => 'string',
        'payment_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
        'invoice' => null,
        'service_code' => null,
        'status' => null,
        'is_test' => null,
        'order' => null,
        'currency' => null,
        'amount_debit' => 'double',
        'amount_credit' => 'double',
        'transaction_type' => null,
        'services' => null,
        'custom_parameters' => null,
        'additional_parameters' => null,
        'mutation_type' => 'int32',
        'related_transactions' => null,
        'is_cancelable' => null,
        'issuing_country' => null,
        'start_recurrent' => null,
        'recurring' => null,
        'customer_name' => null,
        'payer_hash' => null,
        'payment_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'invoice' => 'invoice',
        'service_code' => 'serviceCode',
        'status' => 'status',
        'is_test' => 'isTest',
        'order' => 'order',
        'currency' => 'currency',
        'amount_debit' => 'amountDebit',
        'amount_credit' => 'amountCredit',
        'transaction_type' => 'transactionType',
        'services' => 'services',
        'custom_parameters' => 'customParameters',
        'additional_parameters' => 'additionalParameters',
        'mutation_type' => 'mutationType',
        'related_transactions' => 'relatedTransactions',
        'is_cancelable' => 'isCancelable',
        'issuing_country' => 'issuingCountry',
        'start_recurrent' => 'startRecurrent',
        'recurring' => 'recurring',
        'customer_name' => 'customerName',
        'payer_hash' => 'payerHash',
        'payment_key' => 'paymentKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'invoice' => 'setInvoice',
        'service_code' => 'setServiceCode',
        'status' => 'setStatus',
        'is_test' => 'setIsTest',
        'order' => 'setOrder',
        'currency' => 'setCurrency',
        'amount_debit' => 'setAmountDebit',
        'amount_credit' => 'setAmountCredit',
        'transaction_type' => 'setTransactionType',
        'services' => 'setServices',
        'custom_parameters' => 'setCustomParameters',
        'additional_parameters' => 'setAdditionalParameters',
        'mutation_type' => 'setMutationType',
        'related_transactions' => 'setRelatedTransactions',
        'is_cancelable' => 'setIsCancelable',
        'issuing_country' => 'setIssuingCountry',
        'start_recurrent' => 'setStartRecurrent',
        'recurring' => 'setRecurring',
        'customer_name' => 'setCustomerName',
        'payer_hash' => 'setPayerHash',
        'payment_key' => 'setPaymentKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'invoice' => 'getInvoice',
        'service_code' => 'getServiceCode',
        'status' => 'getStatus',
        'is_test' => 'getIsTest',
        'order' => 'getOrder',
        'currency' => 'getCurrency',
        'amount_debit' => 'getAmountDebit',
        'amount_credit' => 'getAmountCredit',
        'transaction_type' => 'getTransactionType',
        'services' => 'getServices',
        'custom_parameters' => 'getCustomParameters',
        'additional_parameters' => 'getAdditionalParameters',
        'mutation_type' => 'getMutationType',
        'related_transactions' => 'getRelatedTransactions',
        'is_cancelable' => 'getIsCancelable',
        'issuing_country' => 'getIssuingCountry',
        'start_recurrent' => 'getStartRecurrent',
        'recurring' => 'getRecurring',
        'customer_name' => 'getCustomerName',
        'payer_hash' => 'getPayerHash',
        'payment_key' => 'getPaymentKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MUTATION_TYPE_0 = 0;
    const MUTATION_TYPE_1 = 1;
    const MUTATION_TYPE_2 = 2;
    const MUTATION_TYPE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMutationTypeAllowableValues()
    {
        return [
            self::MUTATION_TYPE_0,
            self::MUTATION_TYPE_1,
            self::MUTATION_TYPE_2,
            self::MUTATION_TYPE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_test'] = isset($data['is_test']) ? $data['is_test'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['amount_debit'] = isset($data['amount_debit']) ? $data['amount_debit'] : null;
        $this->container['amount_credit'] = isset($data['amount_credit']) ? $data['amount_credit'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['custom_parameters'] = isset($data['custom_parameters']) ? $data['custom_parameters'] : null;
        $this->container['additional_parameters'] = isset($data['additional_parameters']) ? $data['additional_parameters'] : null;
        $this->container['mutation_type'] = isset($data['mutation_type']) ? $data['mutation_type'] : null;
        $this->container['related_transactions'] = isset($data['related_transactions']) ? $data['related_transactions'] : null;
        $this->container['is_cancelable'] = isset($data['is_cancelable']) ? $data['is_cancelable'] : null;
        $this->container['issuing_country'] = isset($data['issuing_country']) ? $data['issuing_country'] : null;
        $this->container['start_recurrent'] = isset($data['start_recurrent']) ? $data['start_recurrent'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['payer_hash'] = isset($data['payer_hash']) ? $data['payer_hash'] : null;
        $this->container['payment_key'] = isset($data['payment_key']) ? $data['payment_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMutationTypeAllowableValues();
        if (!is_null($this->container['mutation_type']) && !in_array($this->container['mutation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mutation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code service_code
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \P4NL_DATABASE_INTERFACE\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \P4NL_DATABASE_INTERFACE\Model\Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool $is_test is_test
     *
     * @return $this
     */
    public function setIsTest($is_test)
    {
        $this->container['is_test'] = $is_test;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount_debit
     *
     * @return double
     */
    public function getAmountDebit()
    {
        return $this->container['amount_debit'];
    }

    /**
     * Sets amount_debit
     *
     * @param double $amount_debit amount_debit
     *
     * @return $this
     */
    public function setAmountDebit($amount_debit)
    {
        $this->container['amount_debit'] = $amount_debit;

        return $this;
    }

    /**
     * Gets amount_credit
     *
     * @return double
     */
    public function getAmountCredit()
    {
        return $this->container['amount_credit'];
    }

    /**
     * Sets amount_credit
     *
     * @param double $amount_credit amount_credit
     *
     * @return $this
     */
    public function setAmountCredit($amount_credit)
    {
        $this->container['amount_credit'] = $amount_credit;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \P4NL_DATABASE_INTERFACE\Model\Service[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \P4NL_DATABASE_INTERFACE\Model\Service[] $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets custom_parameters
     *
     * @return \P4NL_DATABASE_INTERFACE\Model\CustomParameter[]
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * Sets custom_parameters
     *
     * @param \P4NL_DATABASE_INTERFACE\Model\CustomParameter[] $custom_parameters custom_parameters
     *
     * @return $this
     */
    public function setCustomParameters($custom_parameters)
    {
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * Gets additional_parameters
     *
     * @return \P4NL_DATABASE_INTERFACE\Model\TransactionStatusResponseAdditionalParameter
     */
    public function getAdditionalParameters()
    {
        return $this->container['additional_parameters'];
    }

    /**
     * Sets additional_parameters
     *
     * @param \P4NL_DATABASE_INTERFACE\Model\TransactionStatusResponseAdditionalParameter $additional_parameters additional_parameters
     *
     * @return $this
     */
    public function setAdditionalParameters($additional_parameters)
    {
        $this->container['additional_parameters'] = $additional_parameters;

        return $this;
    }

    /**
     * Gets mutation_type
     *
     * @return int
     */
    public function getMutationType()
    {
        return $this->container['mutation_type'];
    }

    /**
     * Sets mutation_type
     *
     * @param int $mutation_type mutation_type
     *
     * @return $this
     */
    public function setMutationType($mutation_type)
    {
        $allowedValues = $this->getMutationTypeAllowableValues();
        if (!is_null($mutation_type) && !in_array($mutation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mutation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mutation_type'] = $mutation_type;

        return $this;
    }

    /**
     * Gets related_transactions
     *
     * @return \P4NL_DATABASE_INTERFACE\Model\RelatedTransaction[]
     */
    public function getRelatedTransactions()
    {
        return $this->container['related_transactions'];
    }

    /**
     * Sets related_transactions
     *
     * @param \P4NL_DATABASE_INTERFACE\Model\RelatedTransaction[] $related_transactions related_transactions
     *
     * @return $this
     */
    public function setRelatedTransactions($related_transactions)
    {
        $this->container['related_transactions'] = $related_transactions;

        return $this;
    }

    /**
     * Gets is_cancelable
     *
     * @return bool
     */
    public function getIsCancelable()
    {
        return $this->container['is_cancelable'];
    }

    /**
     * Sets is_cancelable
     *
     * @param bool $is_cancelable is_cancelable
     *
     * @return $this
     */
    public function setIsCancelable($is_cancelable)
    {
        $this->container['is_cancelable'] = $is_cancelable;

        return $this;
    }

    /**
     * Gets issuing_country
     *
     * @return string
     */
    public function getIssuingCountry()
    {
        return $this->container['issuing_country'];
    }

    /**
     * Sets issuing_country
     *
     * @param string $issuing_country issuing_country
     *
     * @return $this
     */
    public function setIssuingCountry($issuing_country)
    {
        $this->container['issuing_country'] = $issuing_country;

        return $this;
    }

    /**
     * Gets start_recurrent
     *
     * @return bool
     */
    public function getStartRecurrent()
    {
        return $this->container['start_recurrent'];
    }

    /**
     * Sets start_recurrent
     *
     * @param bool $start_recurrent start_recurrent
     *
     * @return $this
     */
    public function setStartRecurrent($start_recurrent)
    {
        $this->container['start_recurrent'] = $start_recurrent;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring recurring
     *
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets payer_hash
     *
     * @return string
     */
    public function getPayerHash()
    {
        return $this->container['payer_hash'];
    }

    /**
     * Sets payer_hash
     *
     * @param string $payer_hash payer_hash
     *
     * @return $this
     */
    public function setPayerHash($payer_hash)
    {
        $this->container['payer_hash'] = $payer_hash;

        return $this;
    }

    /**
     * Gets payment_key
     *
     * @return string
     */
    public function getPaymentKey()
    {
        return $this->container['payment_key'];
    }

    /**
     * Sets payment_key
     *
     * @param string $payment_key payment_key
     *
     * @return $this
     */
    public function setPaymentKey($payment_key)
    {
        $this->container['payment_key'] = $payment_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


