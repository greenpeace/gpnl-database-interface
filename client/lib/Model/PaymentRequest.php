<?php
/**
 * PaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GPN.RegistrerenApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace P4NL_DATABASE_INTERFACE\Model;

use \ArrayAccess;
use \P4NL_DATABASE_INTERFACE\ObjectSerializer;

/**
 * PaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'initials' => 'string',
        'firstname' => 'string',
        'middlename' => 'string',
        'lastname' => 'string',
        'gender' => 'string',
        'birthday' => '\DateTime',
        'street' => 'string',
        'housenumber' => 'string',
        'housenumber_addition' => 'string',
        'postcode' => 'string',
        'city' => 'string',
        'email' => 'string',
        'phonenumber' => 'string',
        'description' => 'string',
        'amount' => 'double',
        'comment' => 'string',
        'issuers_bank' => 'string',
        'client_ip' => 'string',
        'client_user_agent' => 'string',
        'return_url_success' => 'string',
        'return_url_cancel' => 'string',
        'return_url_error' => 'string',
        'return_url_reject' => 'string',
        'marketing_code' => 'string',
        'literature_code' => 'string',
        'guid' => 'string',
        'country_id' => 'string',
        'account_number' => 'string',
        'subscription_code' => 'string',
        'subscription_end_date' => '\DateTime',
        'subscription_months' => 'int',
        'contact_guid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'initials' => null,
        'firstname' => null,
        'middlename' => null,
        'lastname' => null,
        'gender' => null,
        'birthday' => 'date-time',
        'street' => null,
        'housenumber' => null,
        'housenumber_addition' => null,
        'postcode' => null,
        'city' => null,
        'email' => null,
        'phonenumber' => null,
        'description' => null,
        'amount' => 'double',
        'comment' => null,
        'issuers_bank' => null,
        'client_ip' => null,
        'client_user_agent' => null,
        'return_url_success' => null,
        'return_url_cancel' => null,
        'return_url_error' => null,
        'return_url_reject' => null,
        'marketing_code' => null,
        'literature_code' => null,
        'guid' => null,
        'country_id' => null,
        'account_number' => null,
        'subscription_code' => null,
        'subscription_end_date' => 'date-time',
        'subscription_months' => 'int32',
        'contact_guid' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'initials' => 'initials',
        'firstname' => 'firstname',
        'middlename' => 'middlename',
        'lastname' => 'lastname',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'street' => 'street',
        'housenumber' => 'housenumber',
        'housenumber_addition' => 'housenumberAddition',
        'postcode' => 'postcode',
        'city' => 'city',
        'email' => 'email',
        'phonenumber' => 'phonenumber',
        'description' => 'description',
        'amount' => 'amount',
        'comment' => 'comment',
        'issuers_bank' => 'issuersBank',
        'client_ip' => 'clientIp',
        'client_user_agent' => 'clientUserAgent',
        'return_url_success' => 'returnUrlSuccess',
        'return_url_cancel' => 'returnUrlCancel',
        'return_url_error' => 'returnUrlError',
        'return_url_reject' => 'returnUrlReject',
        'marketing_code' => 'marketingCode',
        'literature_code' => 'literatureCode',
        'guid' => 'guid',
        'country_id' => 'countryId',
        'account_number' => 'accountNumber',
        'subscription_code' => 'subscriptionCode',
        'subscription_end_date' => 'subscriptionEndDate',
        'subscription_months' => 'subscriptionMonths',
        'contact_guid' => 'contactGuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'initials' => 'setInitials',
        'firstname' => 'setFirstname',
        'middlename' => 'setMiddlename',
        'lastname' => 'setLastname',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'street' => 'setStreet',
        'housenumber' => 'setHousenumber',
        'housenumber_addition' => 'setHousenumberAddition',
        'postcode' => 'setPostcode',
        'city' => 'setCity',
        'email' => 'setEmail',
        'phonenumber' => 'setPhonenumber',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'comment' => 'setComment',
        'issuers_bank' => 'setIssuersBank',
        'client_ip' => 'setClientIp',
        'client_user_agent' => 'setClientUserAgent',
        'return_url_success' => 'setReturnUrlSuccess',
        'return_url_cancel' => 'setReturnUrlCancel',
        'return_url_error' => 'setReturnUrlError',
        'return_url_reject' => 'setReturnUrlReject',
        'marketing_code' => 'setMarketingCode',
        'literature_code' => 'setLiteratureCode',
        'guid' => 'setGuid',
        'country_id' => 'setCountryId',
        'account_number' => 'setAccountNumber',
        'subscription_code' => 'setSubscriptionCode',
        'subscription_end_date' => 'setSubscriptionEndDate',
        'subscription_months' => 'setSubscriptionMonths',
        'contact_guid' => 'setContactGuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'initials' => 'getInitials',
        'firstname' => 'getFirstname',
        'middlename' => 'getMiddlename',
        'lastname' => 'getLastname',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'street' => 'getStreet',
        'housenumber' => 'getHousenumber',
        'housenumber_addition' => 'getHousenumberAddition',
        'postcode' => 'getPostcode',
        'city' => 'getCity',
        'email' => 'getEmail',
        'phonenumber' => 'getPhonenumber',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'comment' => 'getComment',
        'issuers_bank' => 'getIssuersBank',
        'client_ip' => 'getClientIp',
        'client_user_agent' => 'getClientUserAgent',
        'return_url_success' => 'getReturnUrlSuccess',
        'return_url_cancel' => 'getReturnUrlCancel',
        'return_url_error' => 'getReturnUrlError',
        'return_url_reject' => 'getReturnUrlReject',
        'marketing_code' => 'getMarketingCode',
        'literature_code' => 'getLiteratureCode',
        'guid' => 'getGuid',
        'country_id' => 'getCountryId',
        'account_number' => 'getAccountNumber',
        'subscription_code' => 'getSubscriptionCode',
        'subscription_end_date' => 'getSubscriptionEndDate',
        'subscription_months' => 'getSubscriptionMonths',
        'contact_guid' => 'getContactGuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['middlename'] = isset($data['middlename']) ? $data['middlename'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['housenumber'] = isset($data['housenumber']) ? $data['housenumber'] : null;
        $this->container['housenumber_addition'] = isset($data['housenumber_addition']) ? $data['housenumber_addition'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phonenumber'] = isset($data['phonenumber']) ? $data['phonenumber'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['issuers_bank'] = isset($data['issuers_bank']) ? $data['issuers_bank'] : null;
        $this->container['client_ip'] = isset($data['client_ip']) ? $data['client_ip'] : null;
        $this->container['client_user_agent'] = isset($data['client_user_agent']) ? $data['client_user_agent'] : null;
        $this->container['return_url_success'] = isset($data['return_url_success']) ? $data['return_url_success'] : null;
        $this->container['return_url_cancel'] = isset($data['return_url_cancel']) ? $data['return_url_cancel'] : null;
        $this->container['return_url_error'] = isset($data['return_url_error']) ? $data['return_url_error'] : null;
        $this->container['return_url_reject'] = isset($data['return_url_reject']) ? $data['return_url_reject'] : null;
        $this->container['marketing_code'] = isset($data['marketing_code']) ? $data['marketing_code'] : null;
        $this->container['literature_code'] = isset($data['literature_code']) ? $data['literature_code'] : null;
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['subscription_code'] = isset($data['subscription_code']) ? $data['subscription_code'] : null;
        $this->container['subscription_end_date'] = isset($data['subscription_end_date']) ? $data['subscription_end_date'] : null;
        $this->container['subscription_months'] = isset($data['subscription_months']) ? $data['subscription_months'] : null;
        $this->container['contact_guid'] = isset($data['contact_guid']) ? $data['contact_guid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_url_success'] === null) {
            $invalidProperties[] = "'return_url_success' can't be null";
        }
        if ($this->container['return_url_cancel'] === null) {
            $invalidProperties[] = "'return_url_cancel' can't be null";
        }
        if ($this->container['return_url_error'] === null) {
            $invalidProperties[] = "'return_url_error' can't be null";
        }
        if ($this->container['return_url_reject'] === null) {
            $invalidProperties[] = "'return_url_reject' can't be null";
        }
        if ($this->container['marketing_code'] === null) {
            $invalidProperties[] = "'marketing_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string $middlename middlename
     *
     * @return $this
     */
    public function setMiddlename($middlename)
    {
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime $birthday birthday
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets housenumber
     *
     * @return string
     */
    public function getHousenumber()
    {
        return $this->container['housenumber'];
    }

    /**
     * Sets housenumber
     *
     * @param string $housenumber housenumber
     *
     * @return $this
     */
    public function setHousenumber($housenumber)
    {
        $this->container['housenumber'] = $housenumber;

        return $this;
    }

    /**
     * Gets housenumber_addition
     *
     * @return string
     */
    public function getHousenumberAddition()
    {
        return $this->container['housenumber_addition'];
    }

    /**
     * Sets housenumber_addition
     *
     * @param string $housenumber_addition housenumber_addition
     *
     * @return $this
     */
    public function setHousenumberAddition($housenumber_addition)
    {
        $this->container['housenumber_addition'] = $housenumber_addition;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phonenumber
     *
     * @return string
     */
    public function getPhonenumber()
    {
        return $this->container['phonenumber'];
    }

    /**
     * Sets phonenumber
     *
     * @param string $phonenumber phonenumber
     *
     * @return $this
     */
    public function setPhonenumber($phonenumber)
    {
        $this->container['phonenumber'] = $phonenumber;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets issuers_bank
     *
     * @return string
     */
    public function getIssuersBank()
    {
        return $this->container['issuers_bank'];
    }

    /**
     * Sets issuers_bank
     *
     * @param string $issuers_bank issuers_bank
     *
     * @return $this
     */
    public function setIssuersBank($issuers_bank)
    {
        $this->container['issuers_bank'] = $issuers_bank;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string $client_ip client_ip
     *
     * @return $this
     */
    public function setClientIp($client_ip)
    {
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets client_user_agent
     *
     * @return string
     */
    public function getClientUserAgent()
    {
        return $this->container['client_user_agent'];
    }

    /**
     * Sets client_user_agent
     *
     * @param string $client_user_agent client_user_agent
     *
     * @return $this
     */
    public function setClientUserAgent($client_user_agent)
    {
        $this->container['client_user_agent'] = $client_user_agent;

        return $this;
    }

    /**
     * Gets return_url_success
     *
     * @return string
     */
    public function getReturnUrlSuccess()
    {
        return $this->container['return_url_success'];
    }

    /**
     * Sets return_url_success
     *
     * @param string $return_url_success return_url_success
     *
     * @return $this
     */
    public function setReturnUrlSuccess($return_url_success)
    {
        $this->container['return_url_success'] = $return_url_success;

        return $this;
    }

    /**
     * Gets return_url_cancel
     *
     * @return string
     */
    public function getReturnUrlCancel()
    {
        return $this->container['return_url_cancel'];
    }

    /**
     * Sets return_url_cancel
     *
     * @param string $return_url_cancel return_url_cancel
     *
     * @return $this
     */
    public function setReturnUrlCancel($return_url_cancel)
    {
        $this->container['return_url_cancel'] = $return_url_cancel;

        return $this;
    }

    /**
     * Gets return_url_error
     *
     * @return string
     */
    public function getReturnUrlError()
    {
        return $this->container['return_url_error'];
    }

    /**
     * Sets return_url_error
     *
     * @param string $return_url_error return_url_error
     *
     * @return $this
     */
    public function setReturnUrlError($return_url_error)
    {
        $this->container['return_url_error'] = $return_url_error;

        return $this;
    }

    /**
     * Gets return_url_reject
     *
     * @return string
     */
    public function getReturnUrlReject()
    {
        return $this->container['return_url_reject'];
    }

    /**
     * Sets return_url_reject
     *
     * @param string $return_url_reject return_url_reject
     *
     * @return $this
     */
    public function setReturnUrlReject($return_url_reject)
    {
        $this->container['return_url_reject'] = $return_url_reject;

        return $this;
    }

    /**
     * Gets marketing_code
     *
     * @return string
     */
    public function getMarketingCode()
    {
        return $this->container['marketing_code'];
    }

    /**
     * Sets marketing_code
     *
     * @param string $marketing_code marketing_code
     *
     * @return $this
     */
    public function setMarketingCode($marketing_code)
    {
        $this->container['marketing_code'] = $marketing_code;

        return $this;
    }

    /**
     * Gets literature_code
     *
     * @return string
     */
    public function getLiteratureCode()
    {
        return $this->container['literature_code'];
    }

    /**
     * Sets literature_code
     *
     * @param string $literature_code literature_code
     *
     * @return $this
     */
    public function setLiteratureCode($literature_code)
    {
        $this->container['literature_code'] = $literature_code;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid guid
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets subscription_code
     *
     * @return string
     */
    public function getSubscriptionCode()
    {
        return $this->container['subscription_code'];
    }

    /**
     * Sets subscription_code
     *
     * @param string $subscription_code subscription_code
     *
     * @return $this
     */
    public function setSubscriptionCode($subscription_code)
    {
        $this->container['subscription_code'] = $subscription_code;

        return $this;
    }

    /**
     * Gets subscription_end_date
     *
     * @return \DateTime
     */
    public function getSubscriptionEndDate()
    {
        return $this->container['subscription_end_date'];
    }

    /**
     * Sets subscription_end_date
     *
     * @param \DateTime $subscription_end_date subscription_end_date
     *
     * @return $this
     */
    public function setSubscriptionEndDate($subscription_end_date)
    {
        $this->container['subscription_end_date'] = $subscription_end_date;

        return $this;
    }

    /**
     * Gets subscription_months
     *
     * @return int
     */
    public function getSubscriptionMonths()
    {
        return $this->container['subscription_months'];
    }

    /**
     * Sets subscription_months
     *
     * @param int $subscription_months subscription_months
     *
     * @return $this
     */
    public function setSubscriptionMonths($subscription_months)
    {
        $this->container['subscription_months'] = $subscription_months;

        return $this;
    }

    /**
     * Gets contact_guid
     *
     * @return string
     */
    public function getContactGuid()
    {
        return $this->container['contact_guid'];
    }

    /**
     * Sets contact_guid
     *
     * @param string $contact_guid contact_guid
     *
     * @return $this
     */
    public function setContactGuid($contact_guid)
    {
        $this->container['contact_guid'] = $contact_guid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


