<?php
/**
 * EmailRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GPN.RegistrerenApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace P4NL_DATABASE_INTERFACE\Model;

use \ArrayAccess;
use \P4NL_DATABASE_INTERFACE\ObjectSerializer;

/**
 * EmailRequest Class Doc Comment
 *
 * @category Class
 * @package  P4NL_DATABASE_INTERFACE
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'voornaam' => 'string',
        'email' => 'string',
        'marketingcode' => 'string',
        'literatuurcode' => 'string',
        'registreer_email_niewsbrief' => 'bool',
        'screen_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'voornaam' => null,
        'email' => null,
        'marketingcode' => null,
        'literatuurcode' => null,
        'registreer_email_niewsbrief' => null,
        'screen_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'voornaam' => 'voornaam',
        'email' => 'email',
        'marketingcode' => 'marketingcode',
        'literatuurcode' => 'literatuurcode',
        'registreer_email_niewsbrief' => 'registreerEmailNiewsbrief',
        'screen_id' => 'screenId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'voornaam' => 'setVoornaam',
        'email' => 'setEmail',
        'marketingcode' => 'setMarketingcode',
        'literatuurcode' => 'setLiteratuurcode',
        'registreer_email_niewsbrief' => 'setRegistreerEmailNiewsbrief',
        'screen_id' => 'setScreenId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'voornaam' => 'getVoornaam',
        'email' => 'getEmail',
        'marketingcode' => 'getMarketingcode',
        'literatuurcode' => 'getLiteratuurcode',
        'registreer_email_niewsbrief' => 'getRegistreerEmailNiewsbrief',
        'screen_id' => 'getScreenId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['voornaam'] = isset($data['voornaam']) ? $data['voornaam'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['marketingcode'] = isset($data['marketingcode']) ? $data['marketingcode'] : null;
        $this->container['literatuurcode'] = isset($data['literatuurcode']) ? $data['literatuurcode'] : null;
        $this->container['registreer_email_niewsbrief'] = isset($data['registreer_email_niewsbrief']) ? $data['registreer_email_niewsbrief'] : null;
        $this->container['screen_id'] = isset($data['screen_id']) ? $data['screen_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['voornaam'] === null) {
            $invalidProperties[] = "'voornaam' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['marketingcode'] === null) {
            $invalidProperties[] = "'marketingcode' can't be null";
        }
        if ($this->container['literatuurcode'] === null) {
            $invalidProperties[] = "'literatuurcode' can't be null";
        }
        if ($this->container['screen_id'] === null) {
            $invalidProperties[] = "'screen_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets voornaam
     *
     * @return string
     */
    public function getVoornaam()
    {
        return $this->container['voornaam'];
    }

    /**
     * Sets voornaam
     *
     * @param string $voornaam voornaam
     *
     * @return $this
     */
    public function setVoornaam($voornaam)
    {
        $this->container['voornaam'] = $voornaam;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets marketingcode
     *
     * @return string
     */
    public function getMarketingcode()
    {
        return $this->container['marketingcode'];
    }

    /**
     * Sets marketingcode
     *
     * @param string $marketingcode marketingcode
     *
     * @return $this
     */
    public function setMarketingcode($marketingcode)
    {
        $this->container['marketingcode'] = $marketingcode;

        return $this;
    }

    /**
     * Gets literatuurcode
     *
     * @return string
     */
    public function getLiteratuurcode()
    {
        return $this->container['literatuurcode'];
    }

    /**
     * Sets literatuurcode
     *
     * @param string $literatuurcode literatuurcode
     *
     * @return $this
     */
    public function setLiteratuurcode($literatuurcode)
    {
        $this->container['literatuurcode'] = $literatuurcode;

        return $this;
    }

    /**
     * Gets registreer_email_niewsbrief
     *
     * @return bool
     */
    public function getRegistreerEmailNiewsbrief()
    {
        return $this->container['registreer_email_niewsbrief'];
    }

    /**
     * Sets registreer_email_niewsbrief
     *
     * @param bool $registreer_email_niewsbrief registreer_email_niewsbrief
     *
     * @return $this
     */
    public function setRegistreerEmailNiewsbrief($registreer_email_niewsbrief)
    {
        $this->container['registreer_email_niewsbrief'] = $registreer_email_niewsbrief;

        return $this;
    }

    /**
     * Gets screen_id
     *
     * @return int
     */
    public function getScreenId()
    {
        return $this->container['screen_id'];
    }

    /**
     * Sets screen_id
     *
     * @param int $screen_id screen_id
     *
     * @return $this
     */
    public function setScreenId($screen_id)
    {
        $this->container['screen_id'] = $screen_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


